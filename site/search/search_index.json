{"config":{"indexing":"full","lang":["en"],"min_search_length":2,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"...","title":"Home"},{"location":"Getting%20Started/Installation/","text":"","title":"Installation"},{"location":"Getting%20Started/hello_world/","text":"Every programming language needs to be able to print a line. In Example.mvn , write the following: println(\"Hello World from Maven!\") // This is a comment, that means anything after the '//' will be ignored until the next line, it's useful for annotating code for example: // The above line prints a hello world statement ^ To compile this run: maven build Output: Hello World from Maven! const lantana_codeblock_copybtn_onclick = (btn) => { const codeBlock = btn.parentNode.children[btn.parentNode.children.length - 1]; const icon = btn.querySelector('.bi-clipboard'); window.getSelection().selectAllChildren(codeBlock); document.execCommand('copy'); icon.classList.add('text-success'); icon.classList.replace('bi-clipboard', 'bi-clipboard-check'); }; document.querySelectorAll('.lantana_codeblock_copybtn').forEach((element) => { element.addEventListener('click', () => lantana_codeblock_copybtn_onclick(element)); });","title":"Hello World"},{"location":"Getting%20Started/setting_things_up/","text":"Creating a Project First things first, a project must be created to begin your journey. A project may be created through: Maven new <project name> For this documentation, the project will be Example After a project has been created, there will be several files present: . \u251c\u2500\u2500 Package.lock \u251c\u2500\u2500 Package.toml \u2514\u2500\u2500 src \u2514\u2500\u2500 Example.mvn Package.lock is a file meant to be managed by Maven so it can be ignored. Package.toml will look like this: [project] name = \"Example\" version = \"0.1.0\" type = \"static\" authors = [] [outputs] Example = \"target_file_format\" #eg. hello_world = exec [targets] targets = [\"native\"] [emissions] #eg. hello_world = [\"object\"] [artifacts] Breaking it down Project [project] name = \"Example\" version = \"0.1.0\" type = \"static\" authors = [] Here you can specify the project name, it's current version and type. Type refers to whether you are using Maven's static typed version or Maven's dynamic typed version Authors can be structured as such: authors = [\"me\", \"myself\", \"& i\"] Outputs [outputs] Example = \"target_file_format\" #eg. hello_world = exec This tells Maven what format you want your file to be, some common formats include: exec: Executable native of the platform deck: Maven's library file format static_lib: A .a archive of the produced .o dylib: A native dynamic library Targets [targets] targets = [\"native\"] A target refers to an operating system you are targeting, native by default choses your operating system. An example of another target for Windows for example would be: x86_64-pc-windows-msvc Another example for Apple iOS would be: apple-ios-arm64 (note: Maven does not support out of the box cross compilation and additional settings may have to be configured) Emissions [emissions] #eg. hello_world = [\"object\"] Emissions refer to byproducts of the compilation process you wish to keep, current supported emissions are: Object: .o file llvm_ir: .ir file representing LLVM's immediate representation Artifacts [artifacts] Artifacts refer to packages that your project depends on, at the start there are no artifacts to depend on! const lantana_codeblock_copybtn_onclick = (btn) => { const codeBlock = btn.parentNode.children[btn.parentNode.children.length - 1]; const icon = btn.querySelector('.bi-clipboard'); window.getSelection().selectAllChildren(codeBlock); document.execCommand('copy'); icon.classList.add('text-success'); icon.classList.replace('bi-clipboard', 'bi-clipboard-check'); }; document.querySelectorAll('.lantana_codeblock_copybtn').forEach((element) => { element.addEventListener('click', () => lantana_codeblock_copybtn_onclick(element)); });","title":"Setting Things Up"},{"location":"Getting%20Started/setting_things_up/#creating-a-project","text":"First things first, a project must be created to begin your journey. A project may be created through: Maven new <project name> For this documentation, the project will be Example After a project has been created, there will be several files present: . \u251c\u2500\u2500 Package.lock \u251c\u2500\u2500 Package.toml \u2514\u2500\u2500 src \u2514\u2500\u2500 Example.mvn Package.lock is a file meant to be managed by Maven so it can be ignored. Package.toml will look like this: [project] name = \"Example\" version = \"0.1.0\" type = \"static\" authors = [] [outputs] Example = \"target_file_format\" #eg. hello_world = exec [targets] targets = [\"native\"] [emissions] #eg. hello_world = [\"object\"] [artifacts]","title":"Creating a Project"},{"location":"Getting%20Started/setting_things_up/#breaking-it-down","text":"","title":"Breaking it down"},{"location":"Getting%20Started/setting_things_up/#project","text":"[project] name = \"Example\" version = \"0.1.0\" type = \"static\" authors = [] Here you can specify the project name, it's current version and type. Type refers to whether you are using Maven's static typed version or Maven's dynamic typed version Authors can be structured as such: authors = [\"me\", \"myself\", \"& i\"]","title":"Project"},{"location":"Getting%20Started/setting_things_up/#outputs","text":"[outputs] Example = \"target_file_format\" #eg. hello_world = exec This tells Maven what format you want your file to be, some common formats include: exec: Executable native of the platform deck: Maven's library file format static_lib: A .a archive of the produced .o dylib: A native dynamic library","title":"Outputs"},{"location":"Getting%20Started/setting_things_up/#targets","text":"[targets] targets = [\"native\"] A target refers to an operating system you are targeting, native by default choses your operating system. An example of another target for Windows for example would be: x86_64-pc-windows-msvc Another example for Apple iOS would be: apple-ios-arm64 (note: Maven does not support out of the box cross compilation and additional settings may have to be configured)","title":"Targets"},{"location":"Getting%20Started/setting_things_up/#emissions","text":"[emissions] #eg. hello_world = [\"object\"] Emissions refer to byproducts of the compilation process you wish to keep, current supported emissions are: Object: .o file llvm_ir: .ir file representing LLVM's immediate representation","title":"Emissions"},{"location":"Getting%20Started/setting_things_up/#artifacts","text":"[artifacts] Artifacts refer to packages that your project depends on, at the start there are no artifacts to depend on! const lantana_codeblock_copybtn_onclick = (btn) => { const codeBlock = btn.parentNode.children[btn.parentNode.children.length - 1]; const icon = btn.querySelector('.bi-clipboard'); window.getSelection().selectAllChildren(codeBlock); document.execCommand('copy'); icon.classList.add('text-success'); icon.classList.replace('bi-clipboard', 'bi-clipboard-check'); }; document.querySelectorAll('.lantana_codeblock_copybtn').forEach((element) => { element.addEventListener('click', () => lantana_codeblock_copybtn_onclick(element)); });","title":"Artifacts"},{"location":"Types/primitives/","text":"What is a Primitive Data Type? A primitive data type is a type of data corresponding to the most basic parts of data, that would be inconvenient to break down further. For example, if there were three blocks on top of each other, remove the first two leaving the last block. The last block can be split in half, but it would no longer be a block then. Similarly primitive data types are types of data that is inconvenient to break down. Integer Primitive Data Types Any programming language needs to deal with numbers in some way or another, unlike high level languages like Python there are multiple integer data types. Signed and Unsigned Each Integer Data Type will have the number of bits it can store as well if it is signed or unsigned . Signed represents whether the number can be negative and/or positive, for example if there is an 8 bit integer that is signed : Bits representing an 8 bit signed integer - - - - - - - - The bit highlighted in blue will be used to identify if the number is negative or not. However this leaves the signed 8 bit integer with only 7 bits that can be used to store numbers. This makes it such that the maximum of a signed 8 bit integer is 127 and the minimum will be 128. (Note: 0 counts as a 'positive' number) The concept behind unsigned numbers are such that the number is assumed to never be negative which affords it the entire 8 bits of space.If there is an unsigned 8 bit integer the representation would look like: Bits representing an 8 bit unsigned integer - - - - - - - - As there is no need for negatives, all 8 bits are used to represent a positive number ranging from 0 to 255. All Integer Data Types Bits Representation Signed ( - is signed) Minimum Maximum 1 Bool 0 1 8 i8 - -128 127 8 u8 0 255 16 i16 - -32,768 32,767 16 u16 0 65,535 32 i32 - -2,147,483,648 2,147,483,647 32 u32 0 4,294,967,295 64 i64 - -9,223,372,036,854,775,808 9,223,372,036,854,775,807 64 u64 0 18,446,744,073,709,551,615 32 f32 - ~ -3.4 \u00d7 10\u00b3\u2078 ~ 3.4 \u00d7 10\u00b3\u2078 64 f64 - ~ -1.7 \u00d7 10\u00b3\u2070\u2078 ~ 1.7 \u00d7 10\u00b3\u2070\u2078 (Note: Representation is the data type in Maven, i is signed and u is unsigned, lastly f is float) Floats Floats represent decimals, the default decimal data type in Maven is f 64, as there is a higher degree of precision versus f 32 Which Integer Data Type Should I Use? If you find yourself in this position, stick with the default integer type ( i 32), unless the following conditions are met: - The numbers you are working with are bigger than i 32's maximum (in which case u 32 or higher will be required [ i 64 if negatives are involved as well]) - The number is smaller than i 32 and you need to be conservative about how much memory you use - A function takes a specific argument that is a different Integer Data Type (note: This is only a general guideline) Usage Of Integer Data Types a = 1 // as a is implicitly the default integer, a is an i32 // you can declare integers of a different type using the integer shorthand: b = 7u64 // b is now a u64 of value 7 c = 3.14 // c is by default an f64 d = 3.14f32 // Other bases for integers (other than 10) are also possible hexadecimal = 0xf00d octal = 0o777 binary = 0b1001 // Casting: Scenarios where you need to convert an integer data type into another integer data type fn foreveri8(number: i8){ println(\"I am an i8\") } // If the function above, seems unfamiliar, it will be covered later // The function takes a number of type i8 my_num = 168u64 // we can use the 'as' keyword to cast the u64 into an i8: my_num2 = my_num as i8 // ERROR: 168 is above the maximum of an i8 // Let's try that again my_num3 = 127u64 my_num4 = my_num3 as i8 // While you may also do: foreveri8(my_num3 as i8), it is considered better practice to keep it in a variable foreveri8(my_num4) // I am an i8 const lantana_codeblock_copybtn_onclick = (btn) => { const codeBlock = btn.parentNode.children[btn.parentNode.children.length - 1]; const icon = btn.querySelector('.bi-clipboard'); window.getSelection().selectAllChildren(codeBlock); document.execCommand('copy'); icon.classList.add('text-success'); icon.classList.replace('bi-clipboard', 'bi-clipboard-check'); }; document.querySelectorAll('.lantana_codeblock_copybtn').forEach((element) => { element.addEventListener('click', () => lantana_codeblock_copybtn_onclick(element)); });","title":"Primitive Data Types"},{"location":"Types/primitives/#what-is-a-primitive-data-type","text":"A primitive data type is a type of data corresponding to the most basic parts of data, that would be inconvenient to break down further. For example, if there were three blocks on top of each other, remove the first two leaving the last block. The last block can be split in half, but it would no longer be a block then. Similarly primitive data types are types of data that is inconvenient to break down.","title":"What is a Primitive Data Type?"},{"location":"Types/primitives/#integer-primitive-data-types","text":"Any programming language needs to deal with numbers in some way or another, unlike high level languages like Python there are multiple integer data types.","title":"Integer Primitive Data Types"},{"location":"Types/primitives/#signed-and-unsigned","text":"Each Integer Data Type will have the number of bits it can store as well if it is signed or unsigned . Signed represents whether the number can be negative and/or positive, for example if there is an 8 bit integer that is signed : Bits representing an 8 bit signed integer - - - - - - - - The bit highlighted in blue will be used to identify if the number is negative or not. However this leaves the signed 8 bit integer with only 7 bits that can be used to store numbers. This makes it such that the maximum of a signed 8 bit integer is 127 and the minimum will be 128. (Note: 0 counts as a 'positive' number) The concept behind unsigned numbers are such that the number is assumed to never be negative which affords it the entire 8 bits of space.If there is an unsigned 8 bit integer the representation would look like: Bits representing an 8 bit unsigned integer - - - - - - - - As there is no need for negatives, all 8 bits are used to represent a positive number ranging from 0 to 255.","title":"Signed and Unsigned"},{"location":"Types/primitives/#all-integer-data-types","text":"Bits Representation Signed ( - is signed) Minimum Maximum 1 Bool 0 1 8 i8 - -128 127 8 u8 0 255 16 i16 - -32,768 32,767 16 u16 0 65,535 32 i32 - -2,147,483,648 2,147,483,647 32 u32 0 4,294,967,295 64 i64 - -9,223,372,036,854,775,808 9,223,372,036,854,775,807 64 u64 0 18,446,744,073,709,551,615 32 f32 - ~ -3.4 \u00d7 10\u00b3\u2078 ~ 3.4 \u00d7 10\u00b3\u2078 64 f64 - ~ -1.7 \u00d7 10\u00b3\u2070\u2078 ~ 1.7 \u00d7 10\u00b3\u2070\u2078 (Note: Representation is the data type in Maven, i is signed and u is unsigned, lastly f is float)","title":"All Integer Data Types"},{"location":"Types/primitives/#floats","text":"Floats represent decimals, the default decimal data type in Maven is f 64, as there is a higher degree of precision versus f 32","title":"Floats"},{"location":"Types/primitives/#which-integer-data-type-should-i-use","text":"If you find yourself in this position, stick with the default integer type ( i 32), unless the following conditions are met: - The numbers you are working with are bigger than i 32's maximum (in which case u 32 or higher will be required [ i 64 if negatives are involved as well]) - The number is smaller than i 32 and you need to be conservative about how much memory you use - A function takes a specific argument that is a different Integer Data Type (note: This is only a general guideline)","title":"Which Integer Data Type Should I Use?"},{"location":"Types/primitives/#usage-of-integer-data-types","text":"a = 1 // as a is implicitly the default integer, a is an i32 // you can declare integers of a different type using the integer shorthand: b = 7u64 // b is now a u64 of value 7 c = 3.14 // c is by default an f64 d = 3.14f32 // Other bases for integers (other than 10) are also possible hexadecimal = 0xf00d octal = 0o777 binary = 0b1001 // Casting: Scenarios where you need to convert an integer data type into another integer data type fn foreveri8(number: i8){ println(\"I am an i8\") } // If the function above, seems unfamiliar, it will be covered later // The function takes a number of type i8 my_num = 168u64 // we can use the 'as' keyword to cast the u64 into an i8: my_num2 = my_num as i8 // ERROR: 168 is above the maximum of an i8 // Let's try that again my_num3 = 127u64 my_num4 = my_num3 as i8 // While you may also do: foreveri8(my_num3 as i8), it is considered better practice to keep it in a variable foreveri8(my_num4) // I am an i8 const lantana_codeblock_copybtn_onclick = (btn) => { const codeBlock = btn.parentNode.children[btn.parentNode.children.length - 1]; const icon = btn.querySelector('.bi-clipboard'); window.getSelection().selectAllChildren(codeBlock); document.execCommand('copy'); icon.classList.add('text-success'); icon.classList.replace('bi-clipboard', 'bi-clipboard-check'); }; document.querySelectorAll('.lantana_codeblock_copybtn').forEach((element) => { element.addEventListener('click', () => lantana_codeblock_copybtn_onclick(element)); });","title":"Usage Of Integer Data Types"}]}